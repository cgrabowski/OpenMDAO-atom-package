// Generated by CoffeeScript 1.4.0
(function() {
  var SysHierarchyChart,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.SysHierarchyChart = SysHierarchyChart = (function() {

    SysHierarchyChart.prototype.defaults = {
      container: null,
      chartHeight: null,
      chartWidth: null,
      minElementHeight: 40,
      collapsedSizePixels: 10,
      transitionDuration: 500,
      rootElementMaxFontSize: 32,
      minFontSize: 14,
      widthRatioAlone: 0.984,
      widthRatioCombined: 0.885,
      colors: {
        root: 'rgb(240, 190, 190)',
        group: 'rgb(240, 180, 180)',
        component: 'rgb(180, 180, 240)',
        variable: 'rgb(210, 210, 225)',
        state: 'rgb(210, 240, 180)'
      }
    };

    SysHierarchyChart.prototype.removeParentNamesRegex = /\w*$/;

    SysHierarchyChart.prototype.elipsisRegex = /\.\.\.$/;

    function SysHierarchyChart(data, config) {
      var datum, getLow, jsonLowestPlainObjs, key, prop, setRowOrder, val, _i, _len, _ref, _ref1, _ref2, _ref3,
        _this = this;
      this.data = data;
      this.config = config != null ? config : {};
      this.handleTextAndTooltips = __bind(this.handleTextAndTooltips, this);

      this.deltaText = __bind(this.deltaText, this);

      this.deltaHeight = __bind(this.deltaHeight, this);

      this.deltaWidth = __bind(this.deltaWidth, this);

      this.deltaY = __bind(this.deltaY, this);

      this.deltaX = __bind(this.deltaX, this);

      this.resize = __bind(this.resize, this);

      _ref = this.defaults;
      for (prop in _ref) {
        val = _ref[prop];
        if (this.config[prop] == null) {
          this.config[prop] = val;
        }
      }
      if (this.config.container != null) {
        this.container = this.config.container;
      } else {
        this.container = document.createElement('div');
        document.body.appendChild(this.container);
      }
      this.chartWidth = (_ref1 = this.config.chartWidth) != null ? _ref1 : window.innerWidth;
      this.chartHeight = (_ref2 = this.config.chartHeight) != null ? _ref2 : window.innerHeight;
      this.rangeX = d3.scale.linear().range([0, this.chartWidth]);
      this.rangeY = d3.scale.linear().range([0, this.chartHeight]);
      this.svg = d3.select(this.container).append('svg').attr('width', this.chartWidth).attr('height', this.chartHeight);
      this.partition = d3.layout.partition().children(function(datum) {
        var vals;
        vals = d3.entries(datum.value);
        vals.forEach(function(ele, i, arr) {
          return ele.siblingOrder = i;
        });
        return vals.filter(function(datum, i, arr) {
          return datum.value.constructor.name === 'Object';
        });
      }).sort(function(a, b) {
        return a.siblingOrder - b.siblingOrder.value(function(datum) {
          return 1;
        });
      });
      this.groups = this.svg.selectAll('g').data(this.partition(d3.entries(this.data[0]))).enter().append('g').each(function(datum) {
        return datum.element = this;
      }).attr('x', this.deltaX).attr('y', this.deltaY).attr('width', this.deltaWidth).attr('height', this.deltaHeight);
      this.groups.filter(function(datum) {
        return !(datum.parent != null);
      }).each(function(datum) {
        return _this.rootDatum = datum;
      });
      console.log(this.rootDatum);
      jsonLowestPlainObjs = (getLow = function(data, keyin, out) {
        var hasChildObj, key;
        hasChildObj = false;
        for (key in data) {
          val = data[key];
          if (val.constructor.name === 'Object') {
            out = getLow(val, key, out);
            hasChildObj = true;
          }
        }
        if (!hasChildObj) {
          out[keyin] = data;
        }
        return out;
      })(data, 'root', {});
      _ref3 = this.getDataLeaves();
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        datum = _ref3[_i];
        for (key in jsonLowestPlainObjs[datum.key]) {
          datum[key] = jsonLowestPlainObjs[datum.key][key];
        }
      }
      this.rects = this.groups.append('rect').attr('x', this.deltaX).attr('y', this.deltaY).attr('width', this.deltaWidth).attr('height', this.deltaHeight).attr('fill', function(datum) {
        var child, type, _j, _len1, _ref4;
        type = 'group';
        if (datum.depth === 0) {
          type = 'root';
        }
        if ((datum.children != null) && !(datum.children[0].children != null)) {
          type = 'component';
        }
        if (!(datum.children != null)) {
          type = 'variable';
        }
        if (datum.state != null) {
          type = 'state';
        }
        if (datum.children != null) {
          _ref4 = datum.children;
          for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
            child = _ref4[_j];
            if (child.state != null) {
              type = 'state';
            }
          }
        }
        return _this.config.colors[type];
      });
      this.titles = this.groups.append('title');
      /*
          @texts = @groups.append('text')
            .attr('font-size', @deltaText)
            .text((datum) => @removeParentNamesRegex.exec datum.key)
            .attr('x', @deltaX)
            .attr('y', @deltaY)
            .each @handleTextAndTooltips
      */

      (setRowOrder = function(depth) {
        var ele, i, row, _j, _len1, _ref4;
        if ((row = _this.getDataByDepth(depth)).length !== 0) {
          _ref4 = row.sort(function(a, b) {
            return a.x - b.x;
          });
          for (i = _j = 0, _len1 = _ref4.length; _j < _len1; i = ++_j) {
            ele = _ref4[i];
            ele.rowOrder = i;
          }
          return setRowOrder(++depth);
        }
      })(1);
      this.groups.on('focus', function(datum) {
        return _this.focusedDatum = d;
      });
      window.addEventListener('resize', this.resize);
    }

    SysHierarchyChart.prototype.getDataByDepth = function(depth) {
      var data;
      data = [];
      this.svg.selectAll('g').each(function(datum) {
        if (datum.depth === depth) {
          return data.push(datum);
        }
      });
      return data;
    };

    SysHierarchyChart.prototype.getDataLeaves = function(datum) {
      var leaves, selection;
      if (datum == null) {
        datum = this.rootDatum;
      }
      leaves = [];
      selection = datum === this.rootDatum ? this.svg.selectAll('g') : this.datumDescendantElements(d3.select(datum.element), datum.filter(function(d) {
        return this.nodeName === 'g';
      }));
      selection.each(function(d) {
        if (d.children == null) {
          return leaves.push(d);
        }
      });
      return leaves;
    };

    SysHierarchyChart.prototype.addDatumChildrenElements = function(selection, datum) {
      var child, children, _i, _len;
      children = datum.element.children;
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        child = children[_i];
        if (children != null) {
          selection[0].push(child);
        }
      }
      return selection;
    };

    SysHierarchyChart.prototype.addDatumAncestorElements = function(selection, datum) {
      while ((datum = datum.parent) != null) {
        selection[0].push(datum.parent.element);
      }
      return selection;
    };

    SysHierarchyChart.prototype.addDatumDescendantElements = function(selection, datum) {
      var pushDatum;
      (pushDatum = function(d) {
        var child, _i, _len, _ref, _results;
        _ref = d.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (d.children != null) {
            selection[0].push(child);
            _results.push(pushDatum(selection, child));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      })(datum);
      return selection;
    };

    SysHierarchyChart.prototype.addDatumSiblingElements = function(selection, datum) {
      var child, _i, _len, _ref, _results;
      _ref = datum.parent.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (datum.parent != null) {
          if (child.element !== datum.element) {
            _results.push(selection[0].push(child.element));
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };

    SysHierarchyChart.prototype.zooom = function(event) {
      this.rangeX.domain([datum.x, datum.x + datum.dx]);
      this.rangeY.domain([datum.y, 1]).range([datum.y === 0 ? 0 : 20], ch);
      return this.transitionAll();
    };

    SysHierarchyChart.prototype.collapse = function(datum) {
      var c, child, collapsing, cw, dd, i, numNotCollapsed, stateVar, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      if (datum === rootDatum) {
        return;
      }
      cw = this.chartWidth;
      numNotCollapsed = (this.getDataByDepth(datum.depth).filter(function(datum, i, arr) {
        return !this.isCollapsed(d.element);
      })).length;
      if (numNotCollapsed === 1) {
        return;
      }
      datum.element.classList.add('collapsed');
      collapsing = this.datumDescendantElements(d3.select(datum.element), datum).classed('collapsed', true);
      collapsing.each(function(d) {
        var parent;
        if (this.nodeName === 'text') {
          this.style.visibility = 'hidden';
        }
        d.dx = 0;
        parent = datum;
        while (this.isCollapsed(parent.element)) {
          parent.dx = this.config.COLLAPSED_SIZE_PIXELS / cw;
          parent = parent.parent;
        }
        return d.x = datum.x;
      });
      child = datum;
      while (child.children != null) {
        stateVar = null;
        _ref = child.children;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          c = _ref[i];
          if (c.state != null) {
            stateVar = c;
            stateVar.dx = this.config.COLLAPSED_SIZE_PIXELS / cw;
            break;
          }
        }
        _ref1 = child.children;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          c = _ref1[i];
          if (!((stateVar != null) || i !== 0)) {
            d.dx = this.config.COLLAPSED_SIZE_PIXELS / cw;
          } else if (stateVar !== d) {
            d.dx = 0;
            _ref2 = datumDescendantElements(d3.select(d.element), d);
            for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
              dd = _ref2[i];
              dd.dx = 0;
            }
          }
        }
        child = child.children[0];
      }
      this.setExpandingDx();
      this.setAllRowPositions();
      return this.transitionAll();
    };

    SysHierarchyChart.prototype.expand = function(datum) {
      var rootExpansionDatum, selection, traverseAncestors;
      selection = d3.select(datum.element);
      this.datumChildrenElements(selection, datum);
      this.datumDescendantElements(selection, datum);
      selection.classed('collapsed', false);
      rootExpansionDatum = (traverseAncestors = function(d) {
        var dd, numExpandedChildren, parent, parentSelection, _i, _len, _ref;
        parent = d.parent;
        parentSelection = d3.select(parent.element);
        if (!this.isCollapsed(parentSelection)) {
          return d;
        }
        parentSelection.classed('collapsed', false);
        numExpandedChildren = (parent.children.filter(function(dd, i, arr) {
          return !this.isCollapsed(dd.element);
        })).length;
        if (numExpandedChildren === 1) {
          _ref = parent.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            dd = _ref[_i];
            this.datumDescendantElements(d3.select(dd.element), dd).classed('collapsed', false);
          }
        }
        return traverseAncestors(parent);
      })(datum);
      this.setExpandingDx();
      this.setAllRowPositions();
      this.transitionAll();
      return rootExpansionDatum;
    };

    SysHierarchyChart.prototype.transitionAll = function(duration) {
      if (duration == null) {
        duration = this.config.DEFAULT_TRANSITION_DURATION;
      }
      return this.svg.selectAll('g, rect, text').transition().duration(duration.attr('x', this.deltaX.attr('y', this.deltaY.attr('width', this.deltaWidth.attr('height', this.deltaHeight.filter('text'.attr('font-size', this.deltaText.each('end', this.handleTextAndTooltips))))))));
    };

    SysHierarchyChart.prototype.resize = function() {
      this.svg.attr('width', this.chartWidth);
      this.rangeX.range([0, this.chartWidth]);
      this.svg.selectAll('.collapsed'.each(function(d) {
        d.dx = d.dx === 0 ? 0 : this.config.collapsedSizePixels / this.chartWidth;
        return this.deltaWidth(datum);
      }));
      this.setExpandingDx();
      this.setAllRowPositions();
      return this.transitionAll(10);
    };

    SysHierarchyChart.prototype.isCollapsed = function(element) {
      return element.classList.contains('collapsed');
    };

    SysHierarchyChart.prototype.setExpandingDx = function() {
      var datum, expanding, findCollapsed, i, leaf, leafdx, leaves, lvs, numCollapsed, numCollapsedAreas, numExpanded, numExpandedLeaves, unCollapsedArea, _i, _j, _len, _len1;
      expanding = this.svg.selectAll('g').filter(function(d) {
        return !this.isCollapsed(this);
      });
      leaves = this.getDataLeaves();
      numExpandedLeaves = 0;
      numCollapsedAreas = 0;
      for (i = _i = 0, _len = leaves.length; _i < _len; i = ++_i) {
        leaf = leaves[i];
        if (this.isCollapsed(leaf.element)) {
          if (leaf.dx === 0) {
            numExpandedLeaves += 1;
          } else {
            numCollapsedAreas += 1;
          }
        }
      }
      unCollapsedArea = this.chartWidth - numCollapsedAreas * this.config.COLLAPSED_SIZE_PIXELS;
      leafdx = 1 / numExpandedLeaves * unCollapsedArea / this.chartWidth;
      for (_j = 0, _len1 = expanding.length; _j < _len1; _j++) {
        datum = expanding[_j];
        if (datum.parent == null) {
          return;
        }
        lvs = this.getDataLeaves(datum);
        numExpanded = (lvs.filter(function(d, i, arr) {
          return !this.isCollapsed(d.element);
        })).length;
        numCollapsed = 0;
        (findCollapsed = function(d) {
          var child, children, _k, _len2, _results;
          if (!(children = d.children != null)) {
            return;
          }
          _results = [];
          for (_k = 0, _len2 = children.length; _k < _len2; _k++) {
            child = children[_k];
            if (this.isCollapsed(child.element)) {
              _results.push(++numCollapsed);
            } else {
              _results.push(findCollapsed(child));
            }
          }
          return _results;
        })(d);
        datum.dx = leafdx * numExpandedLeaves + numCollapsedAreas * this.config.COLLAPSED_SIZE_PIXELS / this.chartWidth;
      }
    };

    SysHierarchyChart.prototype.setAllRowPositions = function() {
      this.groups.each(function(datum) {
        var i, laterals, _i, _ref, _results;
        if (datum.parent == null) {
          return;
        }
        laterals = this.getDataByDepth(datum.depth);
        datum.newX = 0;
        _results = [];
        for (i = _i = 0, _ref = laterals.indexOf(datum); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(datum.newX += laterals[i].dx);
        }
        return _results;
      });
      return this.groups.each(function(datum) {
        if (datum.parent == null) {
          return;
        }
        d.x = datum.newX;
        return delete datum.newX;
      });
    };

    SysHierarchyChart.prototype.deltaX = function(datum) {
      var ele;
      ele = datum.element;
      if (ele.nodeName === 'text') {
        return this.rangeX(datum.x) + deltaWidth(datum) / 2 - ele.getBBox().width / 2;
      } else {
        return this.rangeX(datum.x);
      }
    };

    SysHierarchyChart.prototype.deltaY = function(datum) {
      var ele;
      ele = datum.element;
      if (ele.nodeName === 'text') {
        return this.rangeY(datum.y) + ele.getBBox().height;
      } else {
        return this.rangeY(datum.y);
      }
    };

    SysHierarchyChart.prototype.deltaWidth = function(datum) {
      return this.rangeX(datum.x + datum.dx) - this.rangeX(datum.x);
    };

    SysHierarchyChart.prototype.deltaHeight = function(datum) {
      return this.rangeY(datum.y + datum.dy) - this.rangeY(datum.y);
    };

    SysHierarchyChart.prototype.deltaText = function(datum) {
      var calcedSize, height, rootFontSize;
      height = this.rootDatum.element.getElementsByTagName('rect')[0].getAttribute('height');
      rootFontSize = height * 0.8 > this.config.ROOT_ELEMENT_MAX_FONT_SIZE ? this.config.ROOT_ELEMENT_MAX_FONT_SIZE : height * 0.8;
      calcedSize = rootFontSize - 0.15 * rootFontSize * datum.depth;
      if (rootFontSize < this.config.MIN_FONT_SIZE) {
        return this.config.MIN_FONT_SIZE;
      } else {
        return calcedSize;
      }
    };

    SysHierarchyChart.prototype.handleTextAndTooltips = function(datum) {
      var ele, gw, i, pw, px, siblings, textLength, tooltip, tw, _i, _ref;
      ele = datum.element;
      console.log(ele);
      ele.innerHTML = this.removeParentNamesRegex.exec(datum.key);
      gw = ele.parentNode.getAttribute('width');
      tw = ele.getBBox().width;
      siblings = ele.parentNode.childNodes;
      tooltip = null;
      for (i = _i = 0, _ref = siblings.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        console.log(siblings);
        if (siblings.item(i).nodeName === 'title') {
          tooltip = siblings.item(i);
          break;
        }
      }
      if (tw > gw - 10) {
        if (this.isCollapsed(ele.parentNode)) {
          ele.style.visiblity = 'hidden';
          return tooltip.innerHTML = 'datum.key';
        } else {
          ele.style.visiblity = 'visible';
          tooltip.innerHTML = '';
          if (!this.elipsisRegex.test(ele.innerHTML)) {
            this.innerHTML += '...';
          }
          textLength = ele.innerHTML.length - 3;
          while (ele.getBBox().width > parseInt(ele.parentNode.getAtribute('width')) - 10) {
            if (textLength < 1) {
              ele.innerHTML = '...';
              break;
            } else {
              ele.innerHTML = ele.innerHTML.substr(0, --textLength) + '...';
            }
          }
          if (ele.innerHTML.length < 3) {
            ele.innerHTML = '';
          }
          px = parseInt(ele.parentNode.getAttribute('x'));
          pw = parseInt(ele.parentNode.getAtribute('width'));
          tw = ele.getBBox().width;
          return ele.setAttribute('x', px + (pw / 2 - tw / 2));
        }
      } else {
        if (this.isCollapsed(ele.parentNode)) {
          ele.style.visibility = 'hidden';
          tooltip.innerHTML = datum.key;
        } else {
          ele.style.visibility = 'visible';
          tooltip.innerHTML = '';
        }
        if (this.elipsisRegex.test(ele.innerHTML)) {
          ele.innerHTML = this.removeParentNamesRegex.exec(datum.key);
        }
        px = parseInt(ele.parentNode.getAtribute('x'));
        pw = parseInt(ele.parentNode.getAtribute('width'));
        tw = ele.getBBox().width;
        return ele.setAttribute('x', px + (pw / 2 - tw / 2));
      }
    };

    return SysHierarchyChart;

  })();

}).call(this);
